#----------------------------  FILE INFORMATION  ----------------------------
#
# $URL: http://svn/mfg/probe/automation/perlmenu/trunk/platforms/gpc_common/common.config $
# $Rev: 8270 $
# $Date: 2017-12-05 07:29:04 -0700 (Tue, 05 Dec 2017) $
# $Author: kbremkes $
#
#----------------------------  file information  ----------------------------
#-------------------------------  COPYRIGHT   -------------------------------
#
# © 2009-2011 Micron Technology, Inc. All Rights Reserved.
#
# THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION AND TRADE SECRETS OF
# MICRON TECHNOLOGY, INC. USE, DISCLOSURE, OR REPRODUCTION IS PROHIBITED
# WITHOUT THE PRIOR EXPRESS WRITTEN PERMISSION OF MICRON TECHNOLOGY, INC.
#
#-------------------------------  Copyright   -------------------------------
#------------------------------  EXPORT NOTICE  -----------------------------
#
# These commodities, technology, or software were exported from the
# United States in accordance with the Export Administration Regulations.
# Diversion contrary to U.S. law is prohibited.
#
#------------------------------  export notice  -----------------------------

# This config file for imenu defines common, platform-independent functions that can be used
# by all current and future GPC platforms, used like:
   #sub check_current_state {
   # my $common_cfg = File::Spec->catfile(File::Basename::dirname(__FILE__), "common.cfg");
   # eval {
      # require $common_cfg;
   # };
   # if ($@) {
       # return "Error using $common_cfg! Please escalate to PRBSOFT_ONCALL. \n $@";
   # }
   #}
   # my $head_num = CommonCfg::get_head_num($prober);

package CommonCfg;

use File::Path;      # mkpath, rmtree
use File::Slurp;     # read_file, write_file
use File::Spec;

# generic definitions common to all platforms
our %CmnCfg = (
    'PCT_MailList'   =>  [  ], # Site Specific assignment below
    'PMI_MailList'   =>  [  ], # Site Specific assignment below
);

# Site specific  definitions
if ($::OPT{'site'} =~ /BOISE/i) {
   $CmnCfg{'PCT_MailList'} = [ "F4_PRB_PCT" ];
   $CmnCfg{'PMI_MailList'} = [ "PRB_PROCESS_ENG"];
   $CmnCfg{'allowed_clean_types'} = [ 'DEVICE FILE', 'NO CLEANING', 'CLEANING BLOCK','CLEANING WAFER1','CLEANING WAFER2','CLEANING WAFER3' ];
} elsif ($::OPT{'site'} =~ /AVEZZANO/i) {
   $CmnCfg{'PCT_MailList'} = [ "ecatini", "mciampi", "dserani" ];
   $CmnCfg{'PMI_MailList'} = [ "MIT_FAB9_PROBE_EQUIPMENT", "MIT_FAB9_PROBE_ENGINEERING" ];
   $CmnCfg{'allowed_clean_types'} = [ 'DEVICE FILE', 'NO CLEANING', 'CLEANING BLOCK'];
} elsif ($::OPT{'site'} =~ /LEHI/i) {
   $CmnCfg{'PCT_MailList'} = [ "dwroper", 'F2_PRB_ES_LEADS', ' F2_PRB_ES_IMPROVE_TECHS' ];
   $CmnCfg{'PMI_MailList'} = [ "llatwood", "dwroper", "kjolivas" ];
   $CmnCfg{'allowed_clean_types'} = [ 'DEVICE FILE', 'NO CLEANING', 'CLEANING BLOCK'];
} elsif ($::OPT{'site'} =~ /IMFS/i) {
   $CmnCfg{'PCT_MailList'} = [ "IMFS_F10_PIE_PR_EQUIP_SM", "pbraja" ];
   $CmnCfg{'PMI_MailList'} = [ "IMFS_F10_PIE_PR_EQUIP_SM", "IMFS_F10_PIE_PR_EQUIP_ENGR" ];
   $CmnCfg{'allowed_clean_types'} = [ 'DEVICE FILE', 'NO CLEANING', 'CLEANING BLOCK'];
} elsif ($::OPT{'site'} =~ /MANASSAS/i) {
   $CmnCfg{'PCT_MailList'} = [ "MTV_PROBE_EQUIP_ENG" ];
   $CmnCfg{'PMI_MailList'} = [ "MTV_PROBE_EQUIP_ENG" ];
   $CmnCfg{'allowed_clean_types'} = [ 'DEVICE FILE', 'NO CLEANING', 'CLEANING BLOCK'];
} elsif ($::OPT{'site'} =~ /TECH_SINGAPORE/i) {
   $CmnCfg{'PCT_MailList'} = [ "JIMMYKONG","MENGWEE"];
   $CmnCfg{'PMI_MailList'} = [ "JIMMYKONG","MENGWEE"];
   $CmnCfg{'allowed_clean_types'} = [ 'DEVICE FILE', 'NO CLEANING', 'CLEANING BLOCK'];
} elsif ($::OPT{'site'} =~ /TAICHUNG/i) {
   $CmnCfg{'PCT_MailList'} = [ "OSCART","KBREMKES" ];
   $CmnCfg{'PMI_MailList'} = [ "OSCART","KBREMKES" ];
   $CmnCfg{'allowed_clean_types'} = [ 'DEVICE FILE', 'NO CLEANING', 'CLEANING BLOCK'];
} elsif ($::OPT{'site'} =~ /TAOYUAN/i) {
   $CmnCfg{'PCT_MailList'} = [ "NASHLEE","ANTHONYLIN" ];
   $CmnCfg{'PMI_MailList'} = [ "NASHLEE","ANTHONYLIN" ];
   $CmnCfg{'allowed_clean_types'} = [ 'DEVICE FILE', 'NO CLEANING', 'CLEANING BLOCK','CLEANING WAFER1','CLEANING WAFER2'];
} else {
   $CmnCfg{'PCT_MailList'} = [ "PRBSOFT" ];
   $CmnCfg{'PMI_MailList'} = [ "PRBSOFT" ];
   $CmnCfg{'allowed_clean_types'} = [ 'DEVICE FILE', 'NO CLEANING', 'CLEANING BLOCK'];
}

my $GENERIC_PROBER_CONTROL_DELIMITER = ': ';

# maps the prober name to the head identifier
sub get_head_number {
    my ($prober) = @_;
    # relies on current naming convention, 4th character of prober should be A, B, or S
    if (uc($prober) =~ /^\w{3}([AS])/ || uc($prober) =~ /^E\w{3}/) {
        return(0);
    } elsif (uc($prober) =~ /^\w{3}([B])/) {
        return(1);
    } elsif ($prober =~ /^pmi/i) {
        return(0);
    } else {
        main::fatal_startup_error("Unrecognized Prober '$prober'");
    }
}

# attempt to mimic what sys_info does on the Vizyx platforms
# it would be easier to use names defined in PCT, but there would be
# name conflicts, unless some namespace scoping method was implemented
# dual headed operation requires something to distinguish between heads
# either create 1 file per head (my preference, since it works into
# separate tmptravl.dat files) or append 1 or 2 for head
# we implemented the latter, but that presents problems with
# data for the other head since that info is written to the header
# resulting in needing to know what head it ran on, to obtain
# appropriate card info
# for that reason this takes the first approach with 2 files
#
# Note: this was originally implemented to provide a concise summary of the card information.
#   Now that the card information contains card clean "recipes", and those recipes can change
#   based on bond pad material, it would make more sense to write this information to the
#   lot traveler - that would fix the limitation that dual cassette systems must probe the
#   same bond pad, however we would still need to deal with multiple bond pad recipes,
#   I could not force the contamination_type_desc, and we would still need to move the
#   PCT switching of the contamination type to Lot Start time.
#
sub write_probecard_info_file {
    my ($prober, $cassette, $config_path, $require_clean_recipe, $require_pct) = @_;
    return("Prober=$prober;cassette=$cassette;path=$config_path - Undefined argument error")
         unless (defined $prober and defined $cassette and defined $config_path);
    eval {
        my $head_num = get_head_number($prober);
        my $probecard_info_file = File::Spec->catfile($config_path, "probecard${head_num}.asc");
        my $card_config = $::PCARD_DATA{$prober}{'bit_config_id'};
        my $card_id = $::PCARD_DATA{$prober}{'equip_id'};
        my $num_steps = $::MOVE_TABLE_INFO{$card_config}{'num_steps'};
        my $expected_bond_pad_material = $::PCARD_DATA{$prober}{'contamination_type_desc'};
        my %card_sub_recipe;
        my $formatted_list;
        my @lots = keys %::MES_ATTR;
        my $bond_pad_from_attribute = $::MES_ATTR{$lots[0]}{'CU BOND PAD TYPE'}[0];
        foreach my $param_name (sort keys %{$::PCARD_DATA{$prober}}) {
            my $attribute_keyword = uc($param_name);
            $attribute_keyword =~ s/\s+/_/g; # spaces to underscore
            $attribute_keyword =~ s/__/_/g; # double underscore to single underscore
            my $param_value = $::PCARD_DATA{$prober}{$param_name};
            if ($attribute_keyword eq 'PREHEAT_MINUTES' and $bond_pad_from_attribute =~ /^ni/i) {
                # preheating nickel bond pads is thought to cause browning.
                # supressing the PCT_PREHEAT_MINUTES attribute will cause a dumb soak to occur instead,
                # which leaves the wafers in the cassette during the soak.
                next;
            } elsif ($::OPT{'mtcard_info'} and ($attribute_keyword eq 'MIN_OVERTRAVEL_NO')) {
                $formatted_list .= "PCT_${attribute_keyword}$GENERIC_PROBER_CONTROL_DELIMITER" . int ($::MOVE_TABLE_INFO{$card_config}{'overtravel'}) . "\n";
            } elsif ($::OPT{'mtcard_info'} and ($attribute_keyword eq 'MAX_OVERTRAVEL_NO')) {
                $formatted_list .= "PCT_${attribute_keyword}$GENERIC_PROBER_CONTROL_DELIMITER" . int ($::MOVE_TABLE_INFO{$card_config}{'max_overtravel'}) . "\n";
            } elsif ($::OPT{'mtcard_info'} and ($$attribute_keyword eq 'MAX_PLANARITY_NO')) {
                $formatted_list .= "PCT_${attribute_keyword}$GENERIC_PROBER_CONTROL_DELIMITER" . int ($::MOVE_TABLE_INFO{$card_config}{'planarityLimit'}) . "\n";
            } elsif ( (my $sub_recipe_item, $sub_recipe_index) = $param_name =~ /^([^.]+)\.(\d+)$/ ) {
                $card_sub_recipe{$sub_recipe_index}{$sub_recipe_item} = $::PCARD_DATA{$prober}{$param_name};
            } else {
                $formatted_list .= "PCT_${attribute_keyword}${GENERIC_PROBER_CONTROL_DELIMITER}$param_value\n";
            }
        }
        # validate the cleaning recipes
        my @required_numeric = ('clean_frequency', 'clean_overtravel', 'clean_shift_offset', 'clean_z_count');
        # repeacock added validation for CLEAN_TYPE and CLEAN_INTERVAL
        my @allowed_clean_interval = ('WAFER', 'TOUCHDOWN', 'START_OF_LOT');
        my $disabled_recipe_count = 0;
        my $valid_recipe_count = 0;
        my @all_errors;
        foreach my $sub_recipe_index (keys %card_sub_recipe) {
            if ( $card_sub_recipe{$sub_recipe_index}{'contam_type_desc'} and
                ($card_sub_recipe{$sub_recipe_index}{'contam_type_desc'} eq $expected_bond_pad_material) ) {
                my @recipe_error;
                foreach $required_param (@required_numeric) {
                    if (!defined $card_sub_recipe{$sub_recipe_index}{$required_param}) {
                        push @recipe_error, "Missing $required_param.$sub_recipe_index";
                    } elsif ($card_sub_recipe{$sub_recipe_index}{$required_param} !~ /^[+-]?[\d\.]+$/) {
                        push @recipe_error, "$required_param.$sub_recipe_index is not numeric";
                    }
                }
                if (!defined $card_sub_recipe{$sub_recipe_index}{'clean_type'}) {
                    push @recipe_error, "Missing clean_type.$sub_recipe_index";
                } elsif (!grep /$card_sub_recipe{$sub_recipe_index}{'clean_type'}/, @{$CmnCfg{'allowed_clean_types'}}) {
                    push @recipe_error, "Unsupported clean_type.$sub_recipe_index='$card_sub_recipe{$sub_recipe_index}{'clean_type'}'";
                }
                if (!defined $card_sub_recipe{$sub_recipe_index}{'clean_interval'}) {
                    push @recipe_error, "Missing clean_interval.$sub_recipe_index";
                } elsif (!grep /$card_sub_recipe{$sub_recipe_index}{'clean_interval'}/, @allowed_clean_interval) {
                    push @recipe_error, "Unsupported clean_interval.$sub_recipe_index='$card_sub_recipe{$sub_recipe_index}{'clean_interval'}'";
                }
                if (@recipe_error) {
                    @all_errors = (@all_errors, @recipe_error);
                } else {
                    ++$valid_recipe_count;
                    if ($card_sub_recipe{$sub_recipe_index}{'clean_type'} eq 'DEVICE FILE') {
                        ++$disabled_recipe_count;
                    }
                    # Chad quit sending this attribute that GPC is expecting.  Fortunately there is another attribute that we can use to repopulate it.
                    if ( !defined($card_sub_recipe{$sub_recipe_index}{'touchdown_last_clean'}) or $card_sub_recipe{$sub_recipe_index}{'touchdown_last_clean'} eq "") {
                        $card_sub_recipe{$sub_recipe_index}{'touchdown_last_clean'} = $card_sub_recipe{$sub_recipe_index}{'ct_last_clean'};
                    }
                    # Throw away any touchdowns from partially tested wafers.  Otherwise we'll get out of sync and cleans that should happen at the end of the wafer happen in the middle.
                    if ( $card_sub_recipe{$sub_recipe_index}{'clean_interval'} eq 'WAFER' and $card_sub_recipe{$sub_recipe_index}{'clean_frequency'} > 1)
                    {
                        $card_sub_recipe{$sub_recipe_index}{'touchdown_last_clean'} = $card_sub_recipe{$sub_recipe_index}{'touchdown_last_clean'} * $num_steps;
                    }
                    else
                    {
                        $card_sub_recipe{$sub_recipe_index}{'touchdown_last_clean'} = 0;
                    }
                    foreach my $sub_recipe_item (sort keys %{$card_sub_recipe{$sub_recipe_index}}) {
                        $formatted_list .= "PCT_" . uc($sub_recipe_item) . ".${sub_recipe_index}${GENERIC_PROBER_CONTROL_DELIMITER}$card_sub_recipe{$sub_recipe_index}{$sub_recipe_item}\n";
                    }
                }
            }
        }
        if ($disabled_recipe_count and ($disabled_recipe_count != $valid_recipe_count)) {
            push @all_errors, "$valid_recipe_count clean recipe(s) defined for contam_type_desc='$expected_bond_pad_material', but $disabled_recipe_count set to 'DEVICE FILE'";
        }
        if ($require_pct and !defined $::PCARD_DATA{$prober}{'min_overtravel_no'}) {
            push @all_errors, "Missing min_overtravel_no";
        }
        if ($require_pct and !defined $::PCARD_DATA{$prober}{'max_overtravel_no'}) {
            push @all_errors, "Missing max_overtravel_no";
        }
        if ($require_clean_recipe and !$valid_recipe_count) {
            push @all_errors, "No valid cleaning recipe found for contam_type_desc='$expected_bond_pad_material'";
        }
        my $enable_directed_clean = ( !@all_errors and $valid_recipe_count and ( 0 == $disabled_recipe_count ) ) ? 'YES' : 'NO';
        
        #legacy option kept for compatibility
        $formatted_list .= "PCT_ENABLE_DIRECTED_CLEAN${GENERIC_PROBER_CONTROL_DELIMITER}$enable_directed_clean\n";
        
        #new option replaces "PCT_ENABLE_DIRECTED_CLEAN" because wafer cleans are not directed by still require PCT values
        $formatted_list .= "CLEAN_WITH_PCT_PARAMS${GENERIC_PROBER_CONTROL_DELIMITER}$enable_directed_clean\n";

        main::notify('debug', "writing to $probecard_info_file");
        if (open PROBECARDINFO, ">$probecard_info_file") {
            print PROBECARDINFO "$formatted_list";
            close PROBECARDINFO;
        }
        if (@all_errors) {
            my $subject = "$::TESTER_ID\::Error in PCT configuration for card $card_id";
            my $message = join("\n", @all_errors);
            main::notify_important('mail', $subject, $message, @{$CmnCfg{'PCT_MailList'}});
        } elsif ($require_clean_recipe) {
            # additional check for MES attribute that determines the clean recipe
            my $lot_id = $::LOAD_PORT{$prober}{$cassette}{'lot_id'};
            if (!defined $::MES_ATTR{$lot_id}{'CU BOND PAD TYPE'}[0]) {
                my $subject = "$::TESTER_ID\::Warning 'CU BOND PAD TYPE' attribute is not available for Lot $lot_id";
                my $message = "'CU BOND PAD TYPE' attribute is not available.  $expected_bond_pad_material Cleaning recipe will be used for Lot $lot_id";
                main::notify_important('mail', $subject, $message, @{$CmnCfg{'PCT_MailList'}});
            }
        }
    };
    if ($@) { return($@); }
    else { return(undef); }
}

sub write_scribe_lookup_file {
    my ($prober, $cassette, $attr_dir) = @_;
    my %wafer_process_state = (
        'DataComplete' => 'PROCESSED',
        'Committed'    => 'NEEDS_PROCESSING',
        'Processed'    => 'PROCESSED',
        'DataAborted'  => 'PROCESS_ABORT',
    );
    return("Prober=$prober;cassette=$cassette;path=$attr_dir - Undefined argument error")
         unless (defined $prober and defined $cassette and defined $attr_dir);
    eval {
        my $head_num = get_head_number($prober);
        my $lot_id = $::LOAD_PORT{$prober}{$cassette}{'lot_id'};
        my $carrier_id = $::MES_META{$lot_id}{'CarrierMap'}{'CarrierId'};
        my $scribe_lookup_file = File::Spec->catfile($attr_dir,"scribe_table_hd${head_num}.dat");
        main::notify('info', "writing to $scribe_lookup_file");
        if (open (SCRIBETABLE, ">$scribe_lookup_file")) {
            print SCRIBETABLE "CarrierID: $carrier_id\n";
            foreach my $slot_num (sort {$a<=>$b} keys %{$::LOAD_PORT{$prober}{$cassette}{'carrier'}}) {
                my $wafer_id = $::LOAD_PORT{$prober}{$cassette}{'carrier'}{$slot_num}{'WaferId'};
                my $wafer_scribe = $::LOAD_PORT{$prober}{$cassette}{'carrier'}{$slot_num}{'WaferScribe'};
                my $tracking_lot_id = $::MES_META{$lot_id}{'CarrierSlotList'}{$slot_num}{'LotId'};
                my $start_lot_key = $::PRB_WFR_ATTR{$lot_id}{$wafer_id}{'START LOT KEY'};
                if (!$wafer_id and $tracking_lot_id and $::MES_META{$lot_id}{'CarrierSlotList'}{$slot_num}{'WaferId'}) {
                    # probably a Multi-Lot FOUP
                    $wafer_id = $::MES_META{$lot_id}{'CarrierSlotList'}{$slot_num}{'WaferId'};
                    $wafer_scribe = $::MES_META{$lot_id}{'CarrierSlotList'}{$slot_num}{'WaferScribe'};
                }
                next unless $wafer_id; # skip empty slots
                if (!$start_lot_key) {
                    # probably a Multi-Lot FOUP
                    $start_lot_key = $tracking_lot_id;
                    $start_lot_key =~ s/\..*$//;  # strip lot extension
                }
                my $process_state = (defined $wafer_process_state{$::LOAD_PORT{$prober}{$cassette}{'carrier'}{$slot_num}{'WaferState'}}) ?
                    $wafer_process_state{$::LOAD_PORT{$prober}{$cassette}{'carrier'}{$slot_num}{'WaferState'}} :
                    'SKIPPED';
                print SCRIBETABLE "$wafer_scribe: " .
                                  "$wafer_id: " .
                                  "$start_lot_key " .
                                  "$tracking_lot_id " .
                                  sprintf("%16s ", $process_state) .
                                  "0 " .  # order can be specified if needed
                                  sprintf("S%-2d ", $slot_num) .
                                  "S0\n";
            }
            close SCRIBETABLE;
        }
    };
    if ($@) { return($@); }
    else { return(undef); }
}

# Save prober ET equipment state at lot start.
# This is useful if we need to revert to the original state at lot end and it could be either a standby state or test eng.
# for example if we log to IN_SETUP for temp stabilization then to an up state, we need to know whether to log back to standby or leave the tool in eng.
sub write_starting_et_state_file {
    my ($prober, $attr_dir) = @_;
    return("Prober=$prober;path=$attr_dir - Undefined argument error")
         unless (defined $prober and defined $attr_dir);
    eval {
        my $sub_state = $::ET_STATE{$::TESTER_ID}{'child'}{$prober}{'sub_state'};
        my $state = $::ET_STATE{$::TESTER_ID}{'child'}{$prober}{'state'};
        
        my $head_num = get_head_number($prober);
        my $start_state_file = File::Spec->catfile($attr_dir,"starting_et_state${head_num}.dat");
        
        main::notify('info', "writing to $start_state_file");
        if (open (STATEFILE, ">$start_state_file")) {
            print STATEFILE "PROBER: $prober\n";
            print STATEFILE "STATE: $state\n";
            print STATEFILE "SUB_STATE: $sub_state\n";
            close STATEFILE;
        }
    };
    if ($@) { return($@); }
    else { return(undef); }
}

#====================================================================================
#==============================  DIRECTED PMI SUPPORT ==============================
#====================================================================================


sub prepare_pmi_data {
    my ($prober, $lot) = @_;
    main::fatal_startup_error( "Prober=$prober;lot=$lot - Undefined argument error") unless (defined $prober and defined $lot);
    my $pairs;
    eval {
        # If directed stepping should be performed always, directed PMI may be turned off for this lot or not available
        # If not available, get_pmi_data() should notify appropriate person to have it fixed, and lot will not be processed anyways (as of now)
        # Ex. from config file:  '537' => { 'site' => '*', 'locations' => '-01,12;-06,18;06,19;17,15;03,16', 'lot' => 3, 'wafers' => $WAFERS },
        # Passing ';' to the command lines breaks things, so the get_pmi_data() function replaces them with ','
        # We use the ';' for config file maintenance purposes (easier typo detection) -- BBULLA
        my ($pmi_locs, $lot_interval, $wafer_interval, $fail_threshold) = &get_pmi_data($prober, $lot, $::PRB_LOT_ATTR{$lot}{$lot}{'DESIGN_ID'});
        if( defined $pmi_locs and defined $wafer_interval and defined $lot_interval ) {
#            if( &IsPMILot($lot, $lot_interval) ) {
                $pairs = "PMI_LOCATIONS: $pmi_locs\n";
                $pairs .= "PMI_WAFERS: $wafer_interval\n";
                $pairs .= "PMI_THRESHOLD: $fail_threshold\n" if defined $fail_threshold;
#            }
        }
    };
    if ($@) {
        main::notify('warn', $@);
        return undef;
    }
   return $pairs;
}


sub get_pmi_data {
    my( $prober, $lot, $cdsid ) = @_;
    my $cfg_file;
    my $important_error;
    if ($PrbCfg::PmiTool)
    {
        $cfg_file = File::Spec->catfile($PrbCfg::PlatformCfg{'PMI_Locs'},lc($::RECIPE{JOB_NAME}));
    }
    else
    {
        $cfg_file = File::Spec->catfile($PrbCfg::PlatformCfg{'PMI_Locs'},lc($cdsid));
    }
    eval
    {
       if( -e $cfg_file )
       {
           require $cfg_file;
       }
       else
       {
           die "$cfg_file is missing";
       }
    };
    if ($@)
    {
        my $subject = "$::TESTER_ID\::$cfg_file does not exist!";
        my $message = "Lot=$lot, No PMI's will be performed until this file is restored.";
        main::notify_important('mail', $subject, $message, @{$CmnCfg{'PMI_MailList'}});
        return undef;
    }

    my( $cur_df, $pmi_list, $dia );

    #print "wafer size is $::PRB_LOT_ATTR{$lot}{$lot}{'WAFER SIZE'}\n";

    if( $::PRB_LOT_ATTR{$lot}{$lot}{'WAFER SIZE'} == 8 )
    { $dia = 200; }
    else { $dia = 300; }

    my $pmi_recipe;
    my $pmi_section;

    if ($PrbCfg::PmiTool)
    {
        ($pmi_section,$pmi_recipe) = $::RECIPE{PROGRAM_FLOW_FILE} =~ /(\w+)\s*?:\s*?(\w+)/;
    }
    else
    {
        $pmi_section = $cdsid."_".$dia;
        $pmi_recipe = $::PCARD_DATA{$prober}{'bit_config_id'};
    }

    my %pmi_list;
    eval
    {
        %pmi_list = %{$PMI::{$pmi_section}{$pmi_recipe}};
        if( not %pmi_list )
        {
            my $subject = "$::TESTER_ID\::$PrbCfg::PlatformCfg{'PMI_Locs'} is missing PMI info for DSID $::PRB_LOT_ATTR{$lot}{$lot}{'DESIGN_ID'}. ($lot)";
            my $message = "No PMI's will be performed for this DSID until the info is provided.";
            main::notify_important('mail', $subject, $message, @{$CmnCfg{'PMI_MailList'}});
            return undef;
        }
    };
    if ($@)
    {
        my $subject = "$::TESTER_ID\::$PrbCfg::PlatformCfg{'PMI_Locs'} has missing or bad PMI info for DSID $::PRB_LOT_ATTR{$lot}{$lot}{'DESIGN_ID'}. ($lot)";
        my $message = "No PMI's will be performed for this DSID until the info is corrected.";
        main::notify_important('mail', $subject, $message, @{$CmnCfg{'PMI_MailList'}});
        return undef;
    }
    # right now we are assuming that the 'locations' list is ;-separated pairs.  If not, things will break in pcontrol
    if( defined $pmi_list{'locations'} ) {
        $pmi_list{'locations'} =~ s/;/,/g;  # Have to replace ;'s with commas for command lines...
    }
    if ($PrbCfg::PmiTool){
        return( $pmi_list{'locations'});
    } elsif( defined $pmi_list{'locations'} and defined $pmi_list{'lot'} and defined $pmi_list{'wafers'} ) {
        return( $pmi_list{'locations'}, $pmi_list{'lot'}, $pmi_list{'wafers'}, $pmi_list{'threshold'});
    }
    my $subject = "$::TESTER_ID\::$PrbCfg::PlatformCfg{'PMI_Locs'} has missing or bad PMI info for DSID $::PRB_LOT_ATTR{$lot}{$lot}{'DESIGN_ID'}. ($lot)";
    my $message = "No PMI's will be performed for this DSID until the info is corrected.";
    main::notify_important('mail', $subject, $message, @{$CmnCfg{'PMI_MailList'}});
    return undef;
}

sub IsPMILot {
   my ($lot, $lot_interval) = @_;
   my $doPMI = 1;
   my $interval_val=1;
   my ($found_it, @lines);
   # Has a PMI been performed with this new method yet?
   if( -e $PrbCfg::PlatformCfg{'PMI_Intervals'} ) {
      # should be only one line...PMI intervals are not card technology specific, DSID specific
      @lines = read_file( $PrbCfg::PlatformCfg{'PMI_Intervals'} ); # store the lines off
      my @match = grep /$::PRB_LOT_ATTR{$lot}{$lot}{'DESIGN_ID'}/, @lines;
      if( $#match > 1 )
      {
         $subject = "$::TESTER_ID\::$PrbCfg::PlatformCfg{'PMI_Intervals'} has multiple entries for DSID $::PRB_LOT_ATTR{$lot}{$lot}{'DESIGN_ID'}";
         $message = "PMI's will be performed based on the first entry's value.";
         main::notify_important('mail', $subject, $message, @{$CmnCfg{'PMI_MailList'}});
      }
      # Has a PMI been performed for this DSID?
      if( @match ) {
         chomp( $match[0] );
         my( undef, $interval ) = split( /,/, $match[0] );
         if( $interval ) {
            if( $interval < $lot_interval ) {
               $doPMI = 0;
               $interval_val = $interval+1;
            }
            for( my $indx=0; $indx <= $#lines; $indx++ ) {
               if( $lines[$indx] =~ $::PRB_LOT_ATTR{$lot}{$lot}{'DESIGN_ID'} ) {
                  $lines[$indx] = "$::PRB_LOT_ATTR{$lot}{$lot}{'DESIGN_ID'},$interval_val\n";
                  $found_it = 1;
               }
            }
         }
      }
   }
   unless( $found_it )
   { push( @lines, "$::PRB_LOT_ATTR{$lot}{$lot}{'DESIGN_ID'},$interval_val\n" ); }
   write_file( $PrbCfg::PlatformCfg{'PMI_Intervals'}, sort @lines );
   return $doPMI;
}

#===================================================================
#================ DIRECTED PIN_UPDATE SUPPORT ======================
#===================================================================

# This function checks 2 conditions to enable directed soaking:
# 1. Has the platform (ie the prober) been idle for an hour+?
# 2. Has the probe card changed?
# GPC will turn on directed soaking if the temp change > 10 degrees or F2L is performed
# on 5400s GPC also trys to detect if the card has been changed by sending an ni command since f2l is not used.
sub check_soak_enable {    #soak types
    use constant NO_SOAK => 0;          #soaking is not currently triggered
    use constant NORMAL_SOAK => 1;      #running soak on parameters 1 and 2
    use constant EXTENDED_SOAK => 2;    #running soak on parameters 3 and 4
    #soak reasons
    use constant IDLE_THRESHOLD => 1;
    use constant TEMPERATURE_THRESHOLD => 2;
    use constant CARD_CHANGE => 4;
    use constant PREEXISTING_PERSIST_FILE => 8;
    use constant F2L => 16;
    use constant TEMP_DEVIATION => 32;
    use constant NEEDLE_ALLIGN_INVALID => 64;
    use constant MANUAL_SOAK => 128;
    use constant MANUAL_TEMP_CHANGE => 256;
    # soaking parameters and defualts
    use constant NORMAL_SOAK_TEMP_THRESHOLD => 10;
    use constant EXTENDED_SOAK_TEMP_THRESHOLD => 35;
    use constant SOAK_IDLE_THRESHOLD_SECONDS => 3600; # 1 HOUR.
    use constant DEFAULT_SOAK_INTERVAL => [4,8];
    use constant DEFAULT_SOAK_DURATION => [20,160];
    use constant DEFUALT_MAX_SOAKS => 900;

    my $need_soak = NO_SOAK;
    my $soak_reason = NO_SOAK;
    my ($prober, $tmptravl_path, $soak_path) = @_;
    return("Prober=$prober;prober_state_file=$prober_state_file;tmptravl_path=$tmptravl_path;soak_path=$soak_path - Undefined argument error")
         unless (defined $prober and defined $soak_path);
    main::notify('debug', 'Entering check_soak_enable('.$prober.', '.$tmptravl_path.', '.$soak_path.')');
    eval {
        my $set_defaults = 0;

        my ($last_known_state, $last_active_time) = get_prober_state($prober);

        my $now = time();
        my $idle_time = $now - $last_active_time;
        $idle_time = 0 if $idle_time < SOAK_IDLE_THRESHOLD_SECONDS;
        my $pin_update_type = 0;

        main::notify('debug', "check_soak_enable: now=".$now." last_active_time=".$last_active_time." card=".$card." last_trav=".$last_trav." last_card=".$last_card);

        # if a value is missing use hard coded defaults for soak1-2
        unless ( $::PCARD_DATA{$prober}{'SOAK_1_INTERVAL'} and $::PCARD_DATA{$prober}{'SOAK_2_INTERVAL'} and
            $::PCARD_DATA{$prober}{'SOAK_1_DURATION'} and $::PCARD_DATA{$prober}{'SOAK_2_DURATION'} and
            $::PCARD_DATA{$prober}{'SOAK_ITERATIONS_MAX'} )
        {
            $::PCARD_DATA{$prober}{'SOAK_1_INTERVAL'} = DEFAULT_SOAK_INTERVAL->[0];
            $::PCARD_DATA{$prober}{'SOAK_2_INTERVAL'} = DEFAULT_SOAK_INTERVAL->[1];
            $::PCARD_DATA{$prober}{'SOAK_1_DURATION'} = DEFAULT_SOAK_DURATION->[0];
            $::PCARD_DATA{$prober}{'SOAK_2_DURATION'} = DEFAULT_SOAK_DURATION->[1];
            $::PCARD_DATA{$prober}{'SOAK_ITERATIONS_MAX'} = DEFUALT_MAX_SOAKS;
            $pin_update_type |= NORMAL_SOAK;
        }

        # if a value is missing use for soak3-4 use values from 1-2
        unless ( $::PCARD_DATA{$prober}{'SOAK_3_INTERVAL'} and $::PCARD_DATA{$prober}{'SOAK_4_INTERVAL'} and
            $::PCARD_DATA{$prober}{'SOAK_3_DURATION'} and $::PCARD_DATA{$prober}{'SOAK_4_DURATION'} )
        {
            $::PCARD_DATA{$prober}{'SOAK_3_INTERVAL'} = $::PCARD_DATA{$prober}{'SOAK_1_INTERVAL'};
            $::PCARD_DATA{$prober}{'SOAK_4_INTERVAL'} = $::PCARD_DATA{$prober}{'SOAK_2_INTERVAL'};
            $::PCARD_DATA{$prober}{'SOAK_3_DURATION'} = $::PCARD_DATA{$prober}{'SOAK_1_DURATION'};
            $::PCARD_DATA{$prober}{'SOAK_4_DURATION'} = $::PCARD_DATA{$prober}{'SOAK_2_DURATION'};
            $pin_update_type |= EXTENDED_SOAK;
        }

        if (defined $CmnCfg{'PCT_MailList'} and $pin_update_type)
        {
            my $message ;
            $message = "Normal soak recipe is incomplete defaults will be used.\n" if $pin_update_type & NORMAL_SOAK;
            $message = "Extended soak recipe is incomplete normal soak values will be used.\n" if $pin_update_type & EXTENDED_SOAK;
            my $subject = "$::TESTER_ID\::Recipe for card '$::PCARD_ID{$prober}' is missing a param for directed soaking!";
            main::notify_important('mail', $subject, $message, @{$CmnCfg{'PCT_MailList'}});
        }

        if ( $idle_time ) #  idle time is zero if the threshold is not met
        {
            $soak_reason |= IDLE_THRESHOLD;
            $need_soak = NORMAL_SOAK;
        }

        # Create persist file to make sure soaks are completed
        if ($need_soak && !-d $soak_path) {
            File::Path::mkpath($soak_path);
        }
        my $soak_type;
        my %prev_soak_hash;
        my $soak_hash;

        my $soak_file = File::Spec->catfile($soak_path, "soak_needed".&get_head_number($prober));

        if ($need_soak or (-e $soak_file)) {
            if (-e $soak_file)
            {
                $soak_reason |= PREEXISTING_PERSIST_FILE;
                %prev_soak_hash = get_file_attr_hash($soak_file);
                $soak_type = $prev_soak_hash{'SOAK_TYPE'};

                if ( $prev_soak_hash{'IDLE_START_TIME'} == $last_active_time)
                {
                    $idle_time = $now - $prev_soak_hash{'IDLE_END_TIME'}; #More idle time has occrued since the previous unsuccessful restart.  Add the additional time onto the adjustment.
                }
                else
                {
                    $idle_time =  $now - $last_active_time;  #     None of the time since last active has been accumulated into the adjustment value so add it the adjustment..
                    $idle_time = 0 if $idle_time < SOAK_IDLE_THRESHOLD_SECONDS; #only accumulate additional idle time if it is beyond threshold.
                }

                $idle_time += $prev_soak_hash{'IDLE_ADJUSTMENT'};           #previous idle adjustment is always carried forward.

                $need_soak = EXTENDED_SOAK if ($prev_soak_hash{'SOAK_TYPE'} eq 'EXTENDED_SOAK'); # previous EXTENDED_SOAK in the persist file trumps
            }

            %soak_hash = (
                            'SOAK_START' =>  $prev_soak_hash{'SOAK_START'},  #use the previous start time. If there isn't one it will be populated by GPC
                            'IDLE_ADJUSTMENT' => $idle_time,                 #Don't coun't idle time as soak time because there is no heat transfer when idle.
                            'IDLE_START_TIME' => $last_active_time,          #These are needed so that we don't keep adding on the same idle time onto the adjustment value each time menu is ran
                            'IDLE_END_TIME' => $now ,
                            'SOAK_TYPE' => ($need_soak==EXTENDED_SOAK)?'EXTENDED_SOAK':'NORMAL_SOAK',
                            'SOAK_REASON' => $soak_reason, );
            write_attr_file_from_hash($soak_file,\%soak_hash);
        }
    };
    if ($@) {
        return "$@";
    }
	main::notify('debug', "Leaving check_soak_enable reason code: $soak_reason" );
    return undef; #
}

# grab one attribute from a file.
sub get_file_attr {
   my $file = shift;
   my $attr = shift;
   return undef unless( -e $file );
   my @lines = grep { /$attr:/ } read_file($file);
   $lines[0] =~ /\w+:\s*(.*?)\s*$/;
   $value = $1;
   return $value;
}

#grab an attr hash from an attr file
sub get_file_attr_hash {
    my $file = shift;
    my %attr_hash;
    open FILE,$file;
    while (<FILE>) {
        if($_ =~ /(\w+):\s*(.+?)\s*?$/){
        $name = $1;
        $value = $2;
        $attr_hash{$name}=$value;
        }
    }
    return %attr_hash;
}

sub write_attr_file_from_hash {
    my $file = shift;
    my $hash_ref = shift;
    my %hash = %$hash_ref;
    open FILE,">".$file;
    foreach $key(sort keys %hash){
        print FILE "$key: $hash{$key}\n";
    }
}

# returns last known prober state, or current state if GPC is still running
sub get_prober_state {
    my ($prober) = @_;
    my $prober_alias = uc main::prober_alpha_designator($prober);
    my $prober_state_file = File::Spec->catfile($PrbCfg::PlatformCfg{'StateFileDir'}, "prober_state$prober_alias");
    my $prober_state = 'UNKNOWN';
    my $file_mtime = -1;
    if (open (PROBER_STATE, "<$prober_state_file")) {
        chomp ($prober_state = <PROBER_STATE>);
        close (PROBER_STATE);
        if (wantarray) {
            if ( (my @stat_array) = CORE::stat($prober_state_file) )
            {
                $file_mtime = $stat_array[9];
            }
        }
    }
    if (wantarray) {
        return($prober_state, $file_mtime);
    } else {
        return($prober_state);
    }
}

sub check_temp_stabilization_interrupt
{
    my ($prober) = @_;
    my $time_remaining = 0;
    my ($last_known_state, $last_update_time) = get_prober_state($prober);
    if ( ($last_known_state =~ /(TEMP)|(TSOAK)/i) and defined $::PCARD_DATA{$prober}{'COLD_DUMB_SOAK_SECONDS'} and defined $::PCARD_DATA{$prober}{'HOT_DUMB_SOAK_SECONDS'}) {
        my $desired_soak_time = ($last_known_state =~ /_COOLING/i) ? $::PCARD_DATA{$prober}{'COLD_DUMB_SOAK_SECONDS'} : $::PCARD_DATA{$prober}{'HOT_DUMB_SOAK_SECONDS'};
        if ($last_known_state =~ /TEMP/i) {
            $time_remaining = $desired_soak_time; # last known state was setpoint change, setpoint was not reached
        } else {
            my $time_in_state = time() - $last_update_time;
            $time_remaining = $desired_soak_time - $time_in_state;
        }
        if ($time_remaining < 0) {
            $time_remaining = 0;
        }
        if ($time_remaining) {
            main::notify('log', "Temperature stabilization interrupted for $prober, last known state is '$last_known_state', time remaining = $time_remaining [seconds]");
        }
    }
    return($time_remaining);
}
